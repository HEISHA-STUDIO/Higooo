/* AUTO-GENERATED FILE.  DO NOT MODIFY.
 *
 * This class was automatically generated by the
 * java dlink generator tool. It should not be modified by hand.
 */

// MESSAGE GPS_STATUS PACKING
package com.DLink.messages;
import com.DLink.DLinkPacket;
import com.DLink.DLinkMessage;
import com.DLink.DLinkPayload;
        
/**
* 
        GPS status of DJI drone.
      
*/
public class dlink_msg_gps_status extends DLinkMessage{

    public static final int DLINK_MSG_ID_GPS_STATUS = 7;
    public static final int DLINK_MSG_LENGTH = 26;
    private static final long serialVersionUID = DLINK_MSG_ID_GPS_STATUS;


      
    /**
    * Timestamp (UNIX Epoch time or time since system boot). The receiving end can infer timestamp format (since 1.1.1970 or since system boot) by checking for the magnitude the number.
    */
    public long time_usec;
      
    /**
    * Latitude (WGS84, EGM96 ellipsoid)
    */
    public int lat;
      
    /**
    * Longitude (WGS84, EGM96 ellipsoid)
    */
    public int lon;
      
    /**
    * Altitude (MSL). Positive for up. Note that virtually all GPS modules provide the MSL altitude in addition to the WGS84 altitude.
    */
    public int alt;
      
    /**
    * GPS HDOP horizontal dilution of position (unitless). If unknown, set to: UINT16_MAX
    */
    public int eph;
      
    /**
    * GPS VDOP vertical dilution of position (unitless). If unknown, set to: UINT16_MAX
    */
    public int epv;
      
    /**
    * GPS fix type.
    */
    public short fix_type;
      
    /**
    * Number of satellites visible. If unknown, set to 255
    */
    public short satellites_visible;
    

    /**
    * Generates the payload for a dlink message for a message of this type
    * @return
    */
    public DLinkPacket pack(){
        DLinkPacket packet = new DLinkPacket(DLINK_MSG_LENGTH);
        packet.sysid = 0;
        packet.compid = 0;
        packet.msgid = DLINK_MSG_ID_GPS_STATUS;
              
        packet.payload.putUnsignedLong(time_usec);
              
        packet.payload.putInt(lat);
              
        packet.payload.putInt(lon);
              
        packet.payload.putInt(alt);
              
        packet.payload.putUnsignedShort(eph);
              
        packet.payload.putUnsignedShort(epv);
              
        packet.payload.putUnsignedByte(fix_type);
              
        packet.payload.putUnsignedByte(satellites_visible);
        
        return packet;
    }

    /**
    * Decode a gps_status message into this class fields
    *
    * @param payload The message to decode
    */
    public void unpack(DLinkPayload payload) {
        payload.resetIndex();
              
        this.time_usec = payload.getUnsignedLong();
              
        this.lat = payload.getInt();
              
        this.lon = payload.getInt();
              
        this.alt = payload.getInt();
              
        this.eph = payload.getUnsignedShort();
              
        this.epv = payload.getUnsignedShort();
              
        this.fix_type = payload.getUnsignedByte();
              
        this.satellites_visible = payload.getUnsignedByte();
        
    }

    /**
    * Constructor for a new message, just initializes the msgid
    */
    public dlink_msg_gps_status(){
        msgid = DLINK_MSG_ID_GPS_STATUS;
    }

    /**
    * Constructor for a new message, initializes the message with the payload
    * from a dlink packet
    *
    */
    public dlink_msg_gps_status(DLinkPacket dLinkPacket){
        this.sysid = dLinkPacket.sysid;
        this.compid = dLinkPacket.compid;
        this.msgid = DLINK_MSG_ID_GPS_STATUS;
        unpack(dLinkPacket.payload);        
    }

                    
    /**
    * Returns a string with the MSG name and data
    */
    public String toString(){
        return "DLINK_MSG_ID_GPS_STATUS - sysid:"+sysid+" compid:"+compid+" time_usec:"+time_usec+" lat:"+lat+" lon:"+lon+" alt:"+alt+" eph:"+eph+" epv:"+epv+" fix_type:"+fix_type+" satellites_visible:"+satellites_visible+"";
    }
}
        