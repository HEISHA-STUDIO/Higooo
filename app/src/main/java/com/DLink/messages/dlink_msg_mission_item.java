/* AUTO-GENERATED FILE.  DO NOT MODIFY.
 *
 * This class was automatically generated by the
 * java dlink generator tool. It should not be modified by hand.
 */

// MESSAGE MISSION_ITEM PACKING
package com.DLink.messages;
import com.DLink.DLinkPacket;
import com.DLink.DLinkMessage;
import com.DLink.DLinkPayload;
        
/**
* 
        Encoding a mission item.
      
*/
public class dlink_msg_mission_item extends DLinkMessage{

    public static final int DLINK_MSG_ID_MISSION_ITEM = 100;
    public static final int DLINK_MSG_LENGTH = 31;
    private static final long serialVersionUID = DLINK_MSG_ID_MISSION_ITEM;


      
    /**
    * PARAM1, see CMD_ID enum
    */
    public float param1;
      
    /**
    * PARAM2, see CMD_ID enum
    */
    public float param2;
      
    /**
    * PARAM3, see CMD_ID enum
    */
    public float param3;
      
    /**
    * PARAM4, see CMD_ID enum
    */
    public float param4;
      
    /**
    * PARAM5, latitude
    */
    public float x;
      
    /**
    * PARAM6, longitude
    */
    public float y;
      
    /**
    * PARAM7, relative altitude
    */
    public float z;
      
    /**
    * The scheduled action for the waypoint.
    */
    public int command;
      
    /**
    * Sequence
    */
    public short seq;
    

    /**
    * Generates the payload for a dlink message for a message of this type
    * @return
    */
    public DLinkPacket pack(){
        DLinkPacket packet = new DLinkPacket(DLINK_MSG_LENGTH);
        packet.sysid = 0;
        packet.compid = 0;
        packet.msgid = DLINK_MSG_ID_MISSION_ITEM;
              
        packet.payload.putFloat(param1);
              
        packet.payload.putFloat(param2);
              
        packet.payload.putFloat(param3);
              
        packet.payload.putFloat(param4);
              
        packet.payload.putFloat(x);
              
        packet.payload.putFloat(y);
              
        packet.payload.putFloat(z);
              
        packet.payload.putUnsignedShort(command);
              
        packet.payload.putUnsignedByte(seq);
        
        return packet;
    }

    /**
    * Decode a mission_item message into this class fields
    *
    * @param payload The message to decode
    */
    public void unpack(DLinkPayload payload) {
        payload.resetIndex();
              
        this.param1 = payload.getFloat();
              
        this.param2 = payload.getFloat();
              
        this.param3 = payload.getFloat();
              
        this.param4 = payload.getFloat();
              
        this.x = payload.getFloat();
              
        this.y = payload.getFloat();
              
        this.z = payload.getFloat();
              
        this.command = payload.getUnsignedShort();
              
        this.seq = payload.getUnsignedByte();
        
    }

    /**
    * Constructor for a new message, just initializes the msgid
    */
    public dlink_msg_mission_item(){
        msgid = DLINK_MSG_ID_MISSION_ITEM;
    }

    /**
    * Constructor for a new message, initializes the message with the payload
    * from a dlink packet
    *
    */
    public dlink_msg_mission_item(DLinkPacket dLinkPacket){
        this.sysid = dLinkPacket.sysid;
        this.compid = dLinkPacket.compid;
        this.msgid = DLINK_MSG_ID_MISSION_ITEM;
        unpack(dLinkPacket.payload);        
    }

                      
    /**
    * Returns a string with the MSG name and data
    */
    public String toString(){
        return "DLINK_MSG_ID_MISSION_ITEM - sysid:"+sysid+" compid:"+compid+" param1:"+param1+" param2:"+param2+" param3:"+param3+" param4:"+param4+" x:"+x+" y:"+y+" z:"+z+" command:"+command+" seq:"+seq+"";
    }
}
        